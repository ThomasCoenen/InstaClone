{"version":3,"sources":["contexts/userContext.js","firebase/firebase.js","components/CommentComponent.js","components/CommentInput.js","components/PostComponent.js","firebase/auth.js","components/Navbar.js","components/FeedComponent.js","components/CreatePost.js","pages/HomeScreen.js","App.js","reportWebVitals.js","index.js"],"names":["UserContext","createContext","UserContextProvider","props","useState","user","setUser","Provider","value","children","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","CommentComponent","username","userpost","comment","className","style","fontWeight","marginRight","CommentInput","id","comments","useContext","setComment","commentArray","rows","placeholder","onChange","e","target","onClick","push","email","replace","toLowerCase","collection","doc","update","then","console","log","catch","error","PostComponent","profileUrl","photoUrl","src","alt","marginLeft","refFromURL","delete","map","signInWithGoogle","a","signInWithPopup","res","message","Navbar","signInButtonClick","userBySignIn","photoURL","FeedComponent","posts","setPosts","useEffect","onSnapshot","snapshot","docs","post","data","CreatePost","setUserPost","image","setImage","progress","setProgress","row","htmlFor","cursor","fontSize","type","accept","files","selectedImageSrc","URL","createObjectURL","imagePreview","document","getElementById","display","imageStr","length","result","characters","charactersLength","i","charAt","Math","floor","random","makeId","ref","put","on","round","bytesTransferred","totalBytes","child","getDownloadURL","imageUrl","add","timestamp","FieldValue","serverTimestamp","color","HomeScreen","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3f55beb6.chunk.js","sourcesContent":["//context for userSignIn\nimport {createContext, useState} from \"react\";\n\nexport const UserContext = createContext();\n\nexport const UserContextProvider = (props) => {\n    const [user, setUser] = useState(null);\n\n    return (\n        //will return props children which is what u want\n        <UserContext.Provider value={ {user: [user, setUser]} }>\n            {props.children}\n        </UserContext.Provider>\n    )\n}","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCI6FRkag1shYjjF7Dz9CXOOhJDchVP-ok\",\n    authDomain: \"reactsocial-15668.firebaseapp.com\",\n    projectId: \"reactsocial-15668\",\n    storageBucket: \"reactsocial-15668.appspot.com\",\n    messagingSenderId: \"342172377708\",\n    appId: \"1:342172377708:web:13fbbc8082c9532f9b6e49\"\n  };\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\n\n//Firebase Database\nconst db = firebaseApp.firestore()\n//Firebase Auth\nconst auth = firebase.auth()\n//Firebase Storage\nconst storage = firebase.storage()\n//Firebase Provider (for google sign in)\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport {db, auth, provider, storage}\n\n","import React, {useState, useContext} from 'react'\nimport { UserContext } from '../contexts/userContext';\nimport '../App.css';\n\n\nexport default function CommentComponent({username, userpost, comment}) {\n\n\n    return (\n        <div className=\"comment\">\n            <p className=\"post__photoUrl\">\n                <span style={{fontWeight:\"500\", marginRight:\"4px\"}}>{username}</span>\n                {userpost}\n            </p>\n        </div>\n    )\n}","import React, {useState, useContext} from 'react'\nimport { UserContext } from '../contexts/userContext';\nimport { db} from \"../firebase/firebase\";\n\nimport '../App.css';\n\n\nexport default function CommentInput({id, comments}) {\n    //get user from context\n    const [user, setUser] = useContext(UserContext).user\n\n    const [comment, setComment] = useState(\"\")\n\n    //commentArray initially comments, if u have them \n    const [commentArray, setCommentArray] = useState(\n        comments ? comments : []\n    )\n\n    //funct to add comment to FirebaseDB\n    const addComment = () => {\n        if(comment != \"\") {\n            commentArray.push({\n                comment: comment,\n                //replace \"@gmail.com\" w/ nothing\n                username: user.email.replace(\"@gmail.com\", \"\").toLowerCase(),\n\n            })\n            //add comment to the posts info(UPDATE)\n            db.collection(\"posts\").doc(id).update({\n                //update comments key\n                comments: commentArray\n            })\n            .then(() => {\n                //remove content written in comment input\n                setComment(\"\");\n                console.log(\"comment added\")\n            })\n            .catch((error) => {\n                console.log(`Error ${error}`)\n            })\n        }\n    }\n\n\n    return (\n        <div className=\"commentInput\">\n            <textarea \n                className=\"commentInput_textarea\" \n                rows=\"1\" \n                placeholder=\"write a comment\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}>\n            </textarea>\n            <button onClick={addComment} className=\"commentInput_btn\">Postttt\n            </button>\n        </div>\n    )\n}","//show posts of users \nimport React, {useState, useContext} from 'react'\nimport { UserContext } from '../contexts/userContext';\nimport {storage, db} from \"../firebase/firebase\";\nimport '../App.css';\nimport CommentComponent from './CommentComponent';\nimport CommentInput from './CommentInput';\n\nexport default function PostComponent({\n    profileUrl, \n    username, \n    id, \n    photoUrl, \n    userpost, \n    comments \n}) {\n    //get user from context\n    const [user, setUser] = useContext(UserContext).user\n\n    const deletePost = () => {\n        //(1) - delete the img from firebaseStorage\n        //get reference to the img file to delete\n        var imageRef = storage.refFromURL(photoUrl)\n        //delete the file\n        imageRef.delete()\n        .then(() => {\n            console.log('delete successful')\n        })\n        .catch((error) => {\n            console.log(`Error ${error}`)\n        })\n        //(2) - remove the document from CloudFirestore\n        db.collection(\"posts\").doc(id).delete()\n        .then(() => {\n            console.log('delete post info successful')\n        })\n        .catch((error) => {\n            console.log(`Error post info delete ${error}`)\n        })\n    }\n\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n                <div className=\"post__headerLeft\">\n                    <img className=\"post__profilePic\" src={profileUrl} alt=\"\"/>\n                    <p style={{marginLeft: \"8px\"}}>{username}</p>\n                </div>\n                <button onClick={deletePost} className=\"post__delete\">Delete</button>\n            </div>\n            \n            <div className=\"post__center\">\n                <img className=\"post__photoUrl\" src={photoUrl}/>\n            </div>\n            <div className=\"\">\n                <p className=\"post__photoUrl\">\n                    <span style={{fontWeight:\"500\", marginRight:\"4px\"}}>{username}</span>\n                    {userpost}\n                </p>\n            </div>\n\n            {\n                //show who posted comment\n                comments ? comments.map((comment) => (\n                    <CommentComponent \n                        username={comment.username}\n                        userpost={comment.comment}\n                    />\n                )) : (\n                    <></>\n                )\n            }\n\n            {/* if user exists(logged in) show comment input */}\n            {\n                user ? (\n                    <CommentInput \n                        id={id} \n                        comments={comments}\n                    />\n                ) : (\n                    <></>\n                )\n            }\n\n        </div>\n    )\n}\n","import {auth, provider} from \"./firebase\";\n\n//user login\nexport const signInWithGoogle = async () => {\n    let user; \n    //google signIn popup window\n    await auth\n        .signInWithPopup(provider)\n        .then((res) => {\n            // console.log(res.user)\n            user = res.user; //successful signin\n        })\n        .catch((error) => {\n            console.log(error.message)\n        })\n        //return user info\n        return user\n}\n\n//user logout\nexport const logout = async () => {\n    let logout_success;\n    await auth.signOut()\n    .then(() => {\n        logout_success = true; //true means logout was succesful\n    })\n    .catch((error) => {\n        console.log(error.message)\n    })\n    return logout_success\n}","import React, {useContext} from 'react'\nimport '../App.css';\nimport { signInWithGoogle } from '../firebase/auth';\nimport { UserContext } from '../contexts/userContext';\n\nexport default function Navbar() {\n    //get user from Context\n    const [user, setUser] = useContext(UserContext).user\n    // const {user, setUser} = useContext(UserContext).user\n\n    //onClick. get userInfo from googleSignin\n    const signInButtonClick = async () =>  {\n        let userBySignIn = await signInWithGoogle()\n        //if user logged in succes setUser state\n        if (userBySignIn) setUser(userBySignIn)\n        console.log(\"userBySignIn:\",userBySignIn) //see if ur saving the user info\n    }\n\n    return (\n        <nav className=\"navbar\">\n            <p>Social Media</p>\n            {/* only show login button if user logged in */}\n            {/* photoURL comes from the user object once google authenicates ur login */}\n            {\n            user ? (\n                <img className=\"navbar__img\" src={user.photoURL}></img>\n                ) : (\n                <div className=\"signInBtn\" onClick={signInButtonClick}>\n                    <p>Sign In With Google</p>\n                </div>\n                )\n            }\n        </nav>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport PostComponent from './PostComponent'\nimport {db} from \"../firebase/firebase\";\nimport '../App.css';\n\nexport default function FeedComponent() {\n    //funct to fetch post data from DB. run a funct when Feed is loaded in\n    // DOM for the first time \n    const [posts, setPosts] = useState([])\n\n    useEffect(() => {\n        //get the posts from Firebase Firestore. onSnapshot updates the data from\n        //the DB when it updates. so changes instantly reflected\n        db.collection(\"posts\").onSnapshot((snapshot) => {\n            //set data from snapshot to Posts. have multiple docs in snapshot\n            setPosts(snapshot.docs.map((doc) => (\n                {\n                    id: doc.id, \n                    post: doc.data()\n                }\n            )))\n        })\n\n    }, []) //if blank will only run once when loaded\n\n    return (\n        <div className=\"feed\">\n            {\n                //return a Post for every post\n                posts.map(({id, post}) => {\n                    return <PostComponent\n                        key={id}\n                        id={id}\n                        profileUrl={post.profileUrl}\n                        username={post.username}\n                        photoUrl={post.photoUrl}\n                        userpost={post.userpost}\n                        comments={post.comments}\n                    />\n                })\n            }\n        </div>\n    )\n}\n","import React, {useState, useContext} from 'react'\nimport { UserContext } from '../contexts/userContext';\nimport '../App.css';\nimport {storage, db} from \"../firebase/firebase\";\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\nimport firebase from \"firebase\";\n\n//funct to generate random string for image upload to firebaseStorage\n//provide funct a length. for ex a len=10 generates random str of 10 digits\nfunction makeId(length) {\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n\n\nexport default function CreatePost() {\n    //get user data from context\n    const [user, setUser] = useContext(UserContext).user\n    const [userpost, setUserPost] = useState(\"\")\n    const [image, setImage] = useState(null)\n    //progress of img upload\n    const [progress, setProgress] = useState(0)\n \n    //handle change of image upload\n    const handleChange = (e) => {\n        //make sure u have files\n        if (e.target.files[0]) {\n            //update img component\n            setImage(e.target.files[0])\n            //show img under  textarea. get Source (URL) of file u selected\n            var selectedImageSrc = URL.createObjectURL(e.target.files[0])\n            //provide source to that image w/ id: \"image-preview\"\n            var imagePreview = document.getElementById(\"image-preview\")\n            imagePreview.src = selectedImageSrc\n            imagePreview.style.display = \"block\"\n        }\n    }\n\n    //handle upload for button and sending post to FBStorage and DB\n    const handleUpload = () => {\n        if(image) { //check if img selecter or not\n            //generate random string from above funct\n            var imageStr = makeId(10)\n            //Upload Img to firebaseStorage\n            const uploadTask = storage.ref(`images/${imageStr}.jpg`)\n            .put(image)\n            //create event Task that will listen in to the events\n            uploadTask.on(\"state_changes\", (snapshot) => {\n                //progress funct that shows u progress of upload(ie 1%, 5%, 50%...)\n                const progress = Math.round(\n                    (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                 )\n                 setProgress(progress);\n            }, (error) => {\n                console.log(error)\n            }, () => {\n                //get download url and upload the post info(after done uploading)\n                //FolderName=images, FileName=imageStr\n                storage.ref(\"images\").child(`${imageStr}.jpg`).getDownloadURL()\n                .then((imageUrl) => {\n                    //upload content to CloudFirestore Posts Collection\n                    db.collection(\"posts\").add({\n                        //get timestamp from Firebase Server\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(), \n                        userpost : userpost,\n                        photoUrl: imageUrl, //img u uploaded\n                        //replace @whatever.com, and any spaces\n                        username: user.email.replace(\"@gmail.com\", \"\"),\n                        profileUrl: user.photoURL //photoURL comes from google auth at signin\n                    })\n                })\n                //reset post \n                setUserPost(\"\")\n                setProgress(0)\n                setImage(null)\n\n                //reset img \n                document.getElementById(\"image-preview\").style.display = \"none\"\n            })\n        }\n    }\n\n    return (\n    <div className=\"createPost\">\n        {\n        user ? (\n            <div className=\"createPost__loggedIn\">\n                <p>Create Post</p>\n                <div className=\"createPost__loggedInCenter\">\n                    <textarea \n                        className=\"createPost__textarea\"\n                        row=\"3\"\n                        placeholder=\"enter post here...\"\n                        value={userpost}\n                        onChange={(e) => {setUserPost(e.target.value)}}>\n\n                    </textarea>\n                    {/* show img under text area after uploading it */}\n                    <div className=\"createPost__imagePreview\">\n                        <img id=\"image-preview\" alt=\"\"/>\n                    </div>\n                </div>\n                <div className=\"createPost__loggedInBottom\">\n                    <div className=\"createPost__imageUpload\">\n                        <label htmlFor=\"fileInput\">\n                            <AddAPhotoIcon style={{cursor:\"pointer\", fontSize:\"20px\"}}/>\n                        </label>\n                        {/* //dont want to show \"Choose file\" part */}\n                        <input id=\"fileInput\" type=\"file\" accept=\"image/*\" onChange={handleChange}/>\n                    </div>\n                    <button \n                        className=\"createPost__uploadBtn\" \n                        onClick={handleUpload} \n                        //different color button if nothing in input post\n                        style={{color: userpost ? \"#000\" : \"lightgrey\"}}\n                        >{`Upload ${progress != 0 ? progress : \"\"}`}\n                    </button>\n                </div>\n            </div>\n        ) : (\n            <div className=\"\">Sign In With Google to Post and Comment!\n            </div>\n        )\n        }\n    </div>\n    )\n}","//materialUI to show cool stuff\n//https://material-ui.com/\n//npm install @material-ui/core\n//npm install @material-ui/icons\n\nimport React, {useState, useContext} from 'react'\nimport '../App.css';\nimport Navbar from '../components/Navbar';\nimport { UserContext } from '../contexts/userContext';\nimport {storage, db} from \"../firebase/firebase\";\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\nimport firebase from \"firebase\";\nimport FeedComponent from '../components/FeedComponent';\nimport CreatePost from '../components/CreatePost';\n\nexport default function HomeScreen() {\n    return (\n        <div className=\"home\">\n            <Navbar />\n            <CreatePost/>\n            <FeedComponent/>\n        </div>\n    )\n}\n","//https://www.youtube.com/watch?v=GIIvn6V2GSY\n//reactsocial=firebase name\n//use FirebaseAutheniction and FirebaseStorage(firestore)\n//change CloudFirestore Rules(since i selected Production): \n//from :\n// rules_version = '2';\n// service cloud.firestore {\n//   match /databases/{database}/documents {\n//     match /{document=**} {\n//       allow read, write: if false;\n//     }\n//   }\n// }\n//to: \n//THIS WILL ALLOW USER TO READ/WRITE FROM THE DB W/OUT NEEDING \n//TO BE AUTHENTICATED\n// rules_version = '2';\n// service cloud.firestore {\n//   match /databases/{database}/documents {\n//     match /{document=**} {\n//       allow read, write: if true;\n//     }\n//   }\n// }\n\n\n//change Storage Rules(since i selected Production): \n//from:\n// rules_version = '2';\n// service firebase.storage {\n//   match /b/{bucket}/o {\n//     match /{allPaths=**} {\n//       allow read, write: if request.auth != null;\n//     }\n//   }\n// }\n//to:\n//USER WILL NOT BE REQUIRED TO BE AUTHENTICATED TO READ/WRITE THE DB. HE CAN\n//DIRECTLY ACCESS THE WHOLE DB\n// rules_version = '2';\n// service firebase.storage {\n//   match /b/{bucket}/o {\n//     match /{allPaths=**} {\n//       allow read, write: if true;\n//     }\n//   }\n// }\n\n//set up Firebase Hosting:\n// npm install -g firebase-tools\n//firebase login\n//firebase init  ->> Select HOSTING\n    //type: BUILD for public directory\n//npm run build  -->> Builds ur app \n  //BUILD folder is file u will be uploading\n//firebase deploy  -->> UPloads ur project \n\nimport './App.css';\nimport PostComponent from './components/PostComponent';\nimport { UserContextProvider } from './contexts/userContext';\nimport HomeScreen from './pages/HomeScreen';\n\n\nfunction App() {\n  return (\n    //wrap this wherever u want to get the context \n    <UserContextProvider>\n      <div className=\"app\">\n        <HomeScreen/>\n        {/* <PostComponent/> */}\n      </div>\n    </UserContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}